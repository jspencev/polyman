import { expect, sinon, descriptions } from "@jspencev/test-util";
import getTarballFilename, {
  __RewireAPI__ as Rewire,
} from "%/util/getTarballFilename";
import path from "path";

export default function () {
  describe(descriptions.exportFn("getTarballFilename"), function () {
    let findPackage;

    it("should get the filename generated by the tarball", async function () {
      findPackage = sinon.fake.resolves({
        pack: {
          name: "foo",
          version: "1.0.0",
        },
      });
      Rewire.__Rewire__("findPackage", findPackage);

      const tarballFilename = await getTarballFilename("/foo");
      expect(findPackage).to.be.calledOnceWithExactly("/foo");
      const parsed = path.parse(tarballFilename);
      expect(parsed.dir).to.equal("");
      expect(parsed.ext).to.equal(".tgz");
      expect(tarballFilename.includes("foo")).to.be.true;
      expect(tarballFilename.includes("1.0.0")).to.be.true;
    });

    it("should error if package cannot be found", async function () {
      findPackage = sinon.fake.rejects();
      Rewire.__Rewire__("findPackage", findPackage);

      await expect(getTarballFilename("/foo")).to.eventually.be.rejected;
      expect(findPackage).to.be.calledOnceWithExactly("/foo");
    });
  });
}
